{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","currentNum","operation","opsPressed","added","numFirst","isVisible","fade","sevenPressed","clearBtn","setState","count","numPressed","element","innerHTML","updatedState","push","opsPressNo","total","console","log","parseInt","join","toString","split","nums","document","getElementsByClassName","forEach","addEventListener","ops","class","this","className","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eab9f00a.chunk.js","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { Animated } from \"react-animated-css\";\n\nexport default class App extends Component {\n  state = {\n    currentNum: [\"0\"],\n    operation: null,\n    opsPressed: 0,\n    added: 0,\n    numFirst: [],\n    isVisible: false,\n    fade: false,\n    sevenPressed: false\n  };\n\n  componentDidMount() {\n    let nums = document.getElementsByClassName(\"num\");\n    let arry = [...nums];\n\n    arry.forEach(element => {\n      element.addEventListener(\"click\", () => {\n        this.numPressed(element);\n      });\n    });\n\n    let ops = document.getElementsByClassName(\"opsBtn\");\n    let arrOps = [...ops];\n    arrOps.forEach(element => {\n      element.addEventListener(\"click\", () => {\n        this.opsPressed(element);\n      });\n    });\n  }\n\n  clearBtn = () => {\n    this.setState({ count: [], currentNum: [\"0\"], opsPressed: 0, added: 0 });\n  };\n\n  numPressed = element => {\n    if (element.innerHTML === \"7\") {\n      this.setState({ sevenPressed: true });\n    }\n    if (this.state.currentNum[0] === \"0\") {\n      // console.log(element.innerHTML);\n      this.setState({ ...this.state, currentNum: [element.innerHTML] });\n    } else {\n      if (this.state.opsPressed !== 0) {\n        // console.log(element.innerHTML);\n        if (this.state.added === 0) {\n          this.setState({\n            ...this.state,\n            currentNum: [element.innerHTML],\n            added: 1\n          });\n        } else if (this.state.added !== 0) {\n          let updatedState = { ...this.state };\n          updatedState.currentNum.push(element.innerHTML);\n\n          return this.setState({\n            ...this.state,\n            currentNum: updatedState.currentNum\n          });\n        }\n      } else {\n        let updatedState = { ...this.state };\n        updatedState.currentNum.push(element.innerHTML);\n\n        this.setState({ ...this.state, currentNum: updatedState.currentNum });\n      }\n    }\n  };\n\n  opsPressed = element => {\n    let opsPressNo = this.state.opsPressed;\n    opsPressNo = opsPressNo + 1;\n    let total = 0;\n    if (this.state.opsPressed > 0) {\n      console.log(this.state.operation);\n\n      if (this.state.operation === \"+\") {\n        console.log(\"sum\");\n        console.log(\n          parseInt(this.state.numFirst.join(\"\")),\n          parseInt(this.state.currentNum.join(\"\"))\n        );\n\n        total =\n          parseInt(this.state.numFirst.join(\"\")) +\n          parseInt(this.state.currentNum.join(\"\"));\n      }\n\n      if (this.state.operation === \"-\") {\n        total =\n          parseInt(this.state.numFirst.join(\"\")) -\n          parseInt(this.state.currentNum.join(\"\"));\n      }\n      if (this.state.operation === \"*\") {\n        total =\n          parseInt(this.state.numFirst.join(\"\")) *\n          parseInt(this.state.currentNum.join(\"\"));\n      }\n      if (this.state.operation === \"%\") {\n        total =\n          parseInt(this.state.numFirst.join(\"\")) %\n          parseInt(this.state.currentNum.join(\"\"));\n      }\n      if (this.state.operation === \"/\") {\n        total =\n          parseInt(this.state.numFirst.join(\"\")) /\n          parseInt(this.state.currentNum.join(\"\"));\n      }\n\n      if (this.state.operation === \"=\") {\n        total = this.state.currentNum.join(\"\");\n      }\n\n      this.setState({\n        ...this.state,\n        operation: element.innerHTML,\n        count: [this.state.currentNum, element.innerHTML],\n        opsPressed: opsPressNo,\n        added: 0,\n        currentNum: total.toString().split(\"\"),\n        numFirst: total.toString().split(\"\")\n\n        // opsPressed: opsPressNo\n      });\n    } else {\n      let numFirst = this.state.currentNum;\n      console.log(numFirst);\n\n      this.setState({\n        ...this.state,\n        operation: element.innerHTML,\n        count: [this.state.currentNum, element.innerHTML],\n        opsPressed: opsPressNo,\n        added: 0,\n        numFirst: numFirst\n\n        // opsPressed: opsPressNo\n      });\n      console.log(this.state);\n    }\n  };\n\n  render() {\n    return (\n      <div class=\"container\">\n        <div class=\"row result\">\n          <div class=\"resultCol col\">{this.state.currentNum}</div>\n        </div>\n        <div className=\"buttons\">\n          <div class=\"row\">\n            <div onClick={this.clearBtn} class=\"col-3 col  clear\">\n              clear\n            </div>\n            <div class=\"col-3 col num  \">0</div>\n            <div class=\"col-3 col opsBtn\">*</div>\n            <div class=\"col-3 col opsBtn\">/</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col num \">7</div>\n\n            <div class=\"col num\">8</div>\n            <div class=\"col num\">9</div>\n            <div class=\"col opsBtn\">-</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col num\">4</div>\n            <div class=\"col num\">5</div>\n            <div class=\"col num\">6</div>\n            <div class=\"col opsBtn\">+</div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col num \">1</div>\n            <div class=\"col num\">2</div>\n            <div class=\"col num\">3</div>\n            <div class=\"col opsBtn\">=</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}